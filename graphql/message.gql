type SenderInfo {
	id: ID!
	name: String
	email: String!
	picture: String
}

input SenderInfoInput {
	id: ID!
	name: String
	email: String!
	picture: String
}

input CreateTeamMessageInput {
	boardId: ID!
	senderId: ID!
    senderInfo: SenderInfoInput
	message: String!
	files: [String]
	seenBy: [ID]
	createdAt: AWSDateTime!
	updatedAt: AWSDateTime!
}

input DeleteTeamMessageInput {
	id: ID!
}

input ModelSizeInput {
	ne: Int
	eq: Int
	le: Int
	lt: Int
	ge: Int
	gt: Int
	between: [Int]
}

input TableBooleanFilterInput {
	ne: Boolean
	eq: Boolean
	attributeExists: Boolean
}

input TableFloatFilterInput {
	ne: Float
	eq: Float
	le: Float
	lt: Float
	ge: Float
	gt: Float
	between: [Float]
	attributeExists: Boolean
}

input TableIDFilterInput {
	ne: ID
	eq: ID
	le: ID
	lt: ID
	ge: ID
	gt: ID
	contains: ID
	notContains: ID
	between: [ID]
	beginsWith: ID
	attributeExists: Boolean
	size: ModelSizeInput
}

input TableIntFilterInput {
	ne: Int
	eq: Int
	le: Int
	lt: Int
	ge: Int
	gt: Int
	between: [Int]
	attributeExists: Boolean
}

input TableStringFilterInput {
	ne: String
	eq: String
	le: String
	lt: String
	ge: String
	gt: String
	contains: String
	notContains: String
	between: [String]
	beginsWith: String
	attributeExists: Boolean
	size: ModelSizeInput
}

input TableTeamMessageFilterInput {
	id: TableIDFilterInput
	boardId: TableIDFilterInput
	senderId: TableIDFilterInput
	message: TableStringFilterInput
	files: TableStringFilterInput
	seenBy: TableIDFilterInput
	createdAt: TableStringFilterInput
	updatedAt: TableStringFilterInput
}

type TeamMessage {
	id: ID!
	boardId: ID!
	senderId: ID!
	senderInfo: SenderInfo
	message: String!
	files: [String]
	seenBy: [ID]
	createdAt: AWSDateTime!
	updatedAt: AWSDateTime!
}

type TeamMessageConnection {
	items: [TeamMessage]
	nextToken: String
}

input UpdateTeamMessageInput {
	id: ID!
	boardId: ID
	senderId: ID
	message: String
	files: [String]
	seenBy: [ID]
	createdAt: AWSDateTime
	updatedAt: AWSDateTime
}

type Mutation {
	createTeamMessage(input: CreateTeamMessageInput!): TeamMessage
	updateTeamMessage(input: UpdateTeamMessageInput!): TeamMessage
	deleteTeamMessage(input: DeleteTeamMessageInput!): TeamMessage
}

type Query {
	getTeamMessage(id: ID!): TeamMessage
	listTeamMessages(filter: TableTeamMessageFilterInput, limit: Int, nextToken: String): TeamMessageConnection
	queryTeamMessagesByBoardIdIndex(boardId: ID!, first: Int, after: String): TeamMessageConnection
	queryTeamMessagesBySenderIdIndex(senderId: ID!, first: Int, after: String): TeamMessageConnection
}

type Subscription {
	onCreateTeamMessage(
		id: ID,
		boardId: ID,
		senderId: ID,
		message: String,
		files: [String]
	): TeamMessage
		@aws_subscribe(mutations: ["createTeamMessage"])
	onUpdateTeamMessage(
		id: ID,
		boardId: ID,
		senderId: ID,
		message: String,
		files: [String]
	): TeamMessage
		@aws_subscribe(mutations: ["updateTeamMessage"])
	onDeleteTeamMessage(
		id: ID,
		boardId: ID,
		senderId: ID,
		message: String,
		files: [String]
	): TeamMessage
		@aws_subscribe(mutations: ["deleteTeamMessage"])
	onCreateTeamMessageByBoardId(
		boardId: ID!
	): TeamMessage
		@aws_subscribe(mutations: ["createTeamMessage"])
	onUpdateTeamMessageByBoardId(
		boardId: ID!
	): TeamMessage
		@aws_subscribe(mutations: ["updateTeamMessage"])
	onDeleteTeamMessageByBoardId(
		boardId: ID!
	): TeamMessage
		@aws_subscribe(mutations: ["deleteTeamMessage"])
}